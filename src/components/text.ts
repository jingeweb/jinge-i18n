/**
 * 这个文件里的组件用于编译器自动生成的渲染代码，请勿手工使用。
 */

import { $$, Attributes, Component, createFragment, isComponent, RenderFn, setText, textRenderFn, vm, __ } from 'jinge';
import { watchForComponent, getLocale } from '../core/service';

type TFn = (ctx?: unknown) => string;
/**
 * 用于包裹需要国际化的字符串
 */
export class TComponent extends Component {
  /** dictionary, will be auto generated by compiler */
  static d: (locale: string) => TFn;
  constructor(attrs: Attributes) {
    super(attrs);
    attrs[$$].__watch('**', () => {
      this.__updateIfNeed();
    });
    watchForComponent(this, () => {
      this.__updateIfNeed();
    });
  }
  #t() {
    return (this.constructor as typeof TComponent).d(getLocale())(this[__].passedAttrs);
  }
  __doRender() {
    return [textRenderFn(this, this.#t())];
  }
  __update() {
    setText(this[__].rootNodes[0] as HTMLElement, this.#t());
  }
}

export class RComponent extends Component {
  /** dictionary, will be auto generated by compiler */
  static d: (locale: string) => RenderFn;

  attrs: unknown;

  constructor(attrs: Attributes) {
    super(attrs);

    this.attrs = attrs;

    attrs[$$].__watch('**', () => {
      this.__updateIfNeed();
    });
    watchForComponent(this, () => {
      this.__updateIfNeed();
    });
  }
  __doRender() {
    const renderFn = (this.constructor as typeof RComponent).d(getLocale());
    return renderFn(this);
  }

  async __update() {
    const $ld = this.__lastDOM as Node;
    const $pa = $ld.parentNode as HTMLElement;
    const $ns = $ld.nextSibling;
    await this.__handleBeforeDestroy(true); // remove all doms
    this[__].rootNodes.length = 0;

    const renderFn = (this.constructor as typeof RComponent).d(getLocale());
    const els = await renderFn(this);
    const $newEl = els.length > 1 ? createFragment(els) : els[0];
    if ($ns) {
      $pa.insertBefore($ns, $newEl);
    } else {
      $pa.appendChild($newEl);
    }
    for await (const n of this[__].rootNodes) {
      if (isComponent(n)) {
        await n.__handleAfterRender();
      }
    }
  }

  __beforeDestroy(): void {
    this.attrs = null;
  }
}

/**
 * 用于包裹带有需要国际化的属性（Attribute）的组件。
 * 比如 <S :k="你好" /> 会被转换为 <AComponent vm:ctx="ctx"><S :k={ctx.t0} /></AComponent>
 */
export class AComponent extends Component {
  /** dictionary, will be auto generated by compiler */
  static d: ((locale: string) => TFn)[];
  /** i18n context */
  c: string[];
  constructor(attrs: Attributes) {
    super(attrs);
    attrs[$$].__watch('**', () => {
      this.__updateIfNeed();
    });
    watchForComponent(this, () => {
      this.__updateIfNeed();
    });
    this.c = vm((this.constructor as typeof AComponent).d.map((fn) => fn(getLocale())(attrs)));
  }
  __update(): void {
    (this.constructor as typeof AComponent).d.forEach((fn, i) => {
      const v = fn(getLocale())(this[__].passedAttrs);
      this.c[i] = v;
    });
  }
}
